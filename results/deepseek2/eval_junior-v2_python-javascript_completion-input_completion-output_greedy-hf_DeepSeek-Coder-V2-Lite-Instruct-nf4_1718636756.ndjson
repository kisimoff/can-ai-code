{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using iteration\ndef factorial(n):", "answer": "def factorial(n):\n    if n < 0:\n        return \"Factorial does not exist for negative numbers\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        fact = 1\n        for i in range(2, n + 1):\n            fact *= i\n        return fact\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def factorial(n):\n    if n < 0:\n        return \"Factorial does not exist for negative numbers\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        fact = 1\n        for i in range(2, n + 1):\n            fact *= i\n        return fact", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n    if (n < 0) {\n        return \"Factorial is not defined for negative numbers\";\n    }\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function factorial(n) {\n    if (n < 0) {\n        return \"Factorial is not defined for negative numbers\";\n    }\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using recursion\ndef factorial(n):", "answer": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a python function with input bork that returns the factorial of bork\ndef glork(bork):", "answer": "def glork(bork):\n    if bork < 0:\n        return \"Factorial does not exist for negative numbers\"\n    elif bork == 0 or bork == 1:\n        return 1\n    else:\n        fact = 1\n        while bork > 1:\n            fact *= bork\n            bork -= 1\n        return fact\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def glork(bork):\n    if bork < 0:\n        return \"Factorial does not exist for negative numbers\"\n    elif bork == 0 or bork == 1:\n        return 1\n    else:\n        fact = 1\n        while bork > 1:\n            fact *= bork\n            bork -= 1\n        return fact", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a javascript function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n    if (bork < 0) {\n        return \"Error: Input must be a non-negative integer.\";\n    }\n    if (bork === 0 || bork === 1) {\n        return 1;\n    }\n    let result = 1;\n    for (let i = 2; i <= bork; i++) {\n        result *= i;\n    }\n    return result;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function glork(bork) {\n    if (bork < 0) {\n        return \"Error: Input must be a non-negative integer.\";\n    }\n    if (bork === 0 || bork === 1) {\n        return 1;\n    }\n    let result = 1;\n    for (let i = 2; i <= bork; i++) {\n        result *= i;\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):", "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\nfunction gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):", "answer": "def gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\nfunction gcf(a, b) {\n    // Ensure a and b are positive integers\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Use the Euclidean algorithm to find the greatest common factor\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function gcf(a, b) {\n    // Ensure a and b are positive integers\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Use the Euclidean algorithm to find the greatest common factor\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a python function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):", "answer": "def fofx(x, banana):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(x, banana)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def fofx(x, banana):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(x, banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a javascript function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\nfunction fofx(x, banana) {\n    // Define a helper function to find the gcd of two numbers\n    function gcd(a, b) {\n        if (!b) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n    // Call the helper function with x and banana\n    return gcd(x, banana);\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function fofx(x, banana) {\n    // Define a helper function to find the gcd of two numbers\n    function gcd(a, b) {\n        if (!b) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n    // Call the helper function with x and banana\n    return gcd(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a python function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():", "answer": "def meaning_of_life():\n    return 42\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\nfunction meaning_of_life() {\n    return 42;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function meaning_of_life() {\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a python function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():", "answer": "def things():\n    return [5, 'foobar', 'Madrid']\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\nfunction things() {\n    return [5, 'foobar', 'Madrid'];\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function things() {\n    return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a python function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():", "answer": "def secretidentities():\n    return {\"Superman\": \"Clark Kent\", \"Batman\": \"Bruce Wayne\", \"Spider-Man\": \"Peter Parker\"}\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def secretidentities():\n    return {\"Superman\": \"Clark Kent\", \"Batman\": \"Bruce Wayne\", \"Spider-Man\": \"Peter Parker\"}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a javascript function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\nfunction secretidentities() {\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    };\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function secretidentities() {\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a python function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):", "answer": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n    if (n < 0) {\n        throw new Error(\"Input must be a non-negative integer\");\n    }\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    let a = 0, b = 1, c;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function fib(n) {\n    if (n < 0) {\n        throw new Error(\"Input must be a non-negative integer\");\n    }\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    let a = 0, b = 1, c;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a python function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef potato(g):", "answer": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g-1) + potato(g-2)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g-1) + potato(g-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a javascript function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction potato(g) {", "answer": "\nfunction potato(g) {\n    if (g < 0) {\n        return -1;\n    }\n    if (g === 0) {\n        return 0;\n    }\n    if (g === 1) {\n        return 1;\n    }\n    let a = 0, b = 1, c;\n    for (let i = 2; i <= g; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function potato(g) {\n    if (g < 0) {\n        return -1;\n    }\n    if (g === 0) {\n        return 0;\n    }\n    if (g === 1) {\n        return 1;\n    }\n    let a = 0, b = 1, c;\n    for (let i = 2; i <= g; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a python function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):", "answer": "def fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n    let fibList = [0, 1];\n    for (let i = 2; i < n; i++) {\n        fibList.push(fibList[i - 1] + fibList[i - 2]);\n    }\n    return fibList.slice(0, n);\n}\n\nconsole.log(fib(10)); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function fib(n) {\n    let fibList = [0, 1];\n    for (let i = 2; i < n; i++) {\n        fibList.push(fibList[i - 1] + fibList[i - 2]);\n    }\n    return fibList.slice(0, n);\n}\n\nconsole.log(fib(10)); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a python function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):", "answer": "def glork(bork):\n    if bork <= 0:\n        return []\n    elif bork == 1:\n        return [0]\n    elif bork == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, bork):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def glork(bork):\n    if bork <= 0:\n        return []\n    elif bork == 1:\n        return [0]\n    elif bork == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, bork):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n    // Initialize the list with the first two elements of the fibonacci sequence\n    let fibs = [0, 1];\n    // Loop from 2 to bork (inclusive) to generate the rest of the sequence\n    for (let i = 2; i <= bork; i++) {\n        // Calculate the next element in the sequence using the recursive relation\n        fibs.push(fibs[i - 1] + fibs[i - 2]);\n    }\n    // Return the list of the first `bork` elements of the fibonacci sequence\n    return fibs.slice(0, bork);\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function glork(bork) {\n    // Initialize the list with the first two elements of the fibonacci sequence\n    let fibs = [0, 1];\n    // Loop from 2 to bork (inclusive) to generate the rest of the sequence\n    for (let i = 2; i <= bork; i++) {\n        // Calculate the next element in the sequence using the recursive relation\n        fibs.push(fibs[i - 1] + fibs[i - 2]);\n    }\n    // Return the list of the first `bork` elements of the fibonacci sequence\n    return fibs.slice(0, bork);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a python function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):", "answer": "def substrcount(str, substr):\n    count = start = 0\n    while True:\n        start = str.find(substr, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = start = 0\n    while True:\n        start = str.find(substr, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a javascript function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\nfunction substrcount(str, substr) {\n    let count = 0;\n    let pos = str.indexOf(substr);\n    while (pos !== -1) {\n        count++;\n        pos = str.indexOf(substr, pos + 1);\n    }\n    return count;\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 100000,\n  \"eos_token_id\": 100001,\n  \"max_new_tokens\": 1024,\n  \"temperature\": 0.3,\n  \"top_p\": 0.95\n}\n", "model": "DeepSeek-Coder-V2-Lite-Instruct-nf4", "runtime": "transformers", "code": "function substrcount(str, substr) {\n    let count = 0;\n    let pos = str.indexOf(substr);\n    while (pos !== -1) {\n        count++;\n        pos = str.indexOf(substr, pos + 1);\n    }\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}