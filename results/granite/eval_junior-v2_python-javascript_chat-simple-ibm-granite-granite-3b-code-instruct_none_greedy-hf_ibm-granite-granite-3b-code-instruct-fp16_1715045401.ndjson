{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "Question:\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration\n\nAnswer:\n", "answer": "To calculate the factorial of a number using iteration, we can use a for loop to iterate from 1 to n and multiply the current number to the result.\n\n```python\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```\n\nThis implementation uses a for loop to iterate from 1 to n and multiply the current number to the result. The result is initialized to 1 and then updated in each iteration. Finally, the result is returned.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "Question:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration\n\nAnswer:\n", "answer": ":\n```javascript\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "Question:\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion\n\nAnswer:\n", "answer": "To calculate the factorial of a number using recursion, we can define a function that takes an integer n as input and returns the factorial of n. The base case for the recursion is when n is 0 or 1, in which case the factorial is 1. For any other value of n, we can recursively call the factorial function with n-1 and multiply the result by n.\n\nHere is a Python function that implements this approach:\n\n```python\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\nThis implementation uses recursion to calculate the factorial of a number. The base case is when n is 0 or 1, in which case the factorial is 1. For any other value of n, we recursively call the factorial function with n-1 and multiply the result by n.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "Question:\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion\n\nAnswer:\n", "answer": ":\n```javascript\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "Question:\nWrite a python function glork(bork) with input bork that returns the factorial of bork\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef glork(bork):\n    if bork < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    elif bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    elif bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "Question:\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```javascript\nfunction glork(bork) {\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "Question:\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b\n\nAnswer:\n", "answer": "Here is a Python function that implements the Euclidean algorithm to find the greatest common divisor (GCD) of two numbers:\n\n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\nThe Euclidean algorithm is a well-known algorithm for finding the GCD of two numbers. It works by repeatedly applying the division algorithm to find the remainder of the division of the larger number by the smaller number. The remainder is then used to replace the larger number with the smaller number, and the process is repeated until the remainder is zero. The last non-zero remainder is the GCD of the original two numbers.\n\nThe implementation of the Euclidean algorithm in Python is straightforward. The function takes two inputs, a and b, and repeatedly applies the division algorithm to find the remainder of the division of the larger number by the smaller number. The remainder is then used to replace the larger number with the smaller number, and the process is repeated until the remainder is zero. The last non-zero remainder is the GCD of the original two numbers.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "Question:\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b\n\nAnswer:\n", "answer": ":\n```javascript\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "Question:\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b\n\nAnswer:\n", "answer": "Here is a Python function that implements the Euclidean algorithm to find the greatest common factor of two numbers:\n\n```python\ndef gcf(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\nThe Euclidean algorithm is a well-known algorithm for finding the greatest common divisor (GCD) of two numbers. It works by repeatedly applying the division algorithm to the larger number and the remainder of the division until the remainder becomes zero. The last non-zero remainder is the GCD of the original two numbers.\n\nThe implementation of the Euclidean algorithm in Python is straightforward. The function takes two inputs, a and b, and repeatedly applies the division algorithm to find the GCD. The while loop continues until the remainder becomes zero, at which point the last non-zero remainder is the GCD.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "Question:\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b\n\nAnswer:\n", "answer": ":\n```javascript\nfunction gcf(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcf(b, a % b);\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcf(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "Question:\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\n\nAnswer:\n", "answer": "To find the greatest common divisor (gcd) of two numbers, we can use the Euclidean algorithm. The Euclidean algorithm is an efficient method for finding the greatest common divisor of two numbers.\n\nHere is the implementation of the fofx function using the Euclidean algorithm:\n\n```python\ndef fofx(x, banana):\n    while banana != 0:\n        x, banana = banana, x % banana\n    return x\n```\n\nIn this implementation, we use a while loop to repeatedly divide the larger number by the smaller number and update the values of x and banana until banana becomes zero. At that point, x will be the gcd of the two numbers.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    while banana != 0:\n        x, banana = banana, x % banana\n    return x", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "Question:\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\n\nAnswer:\n", "answer": ":\n```javascript\nfunction fofx(x, banana) {\n  function gcd(a, b) {\n    return b === 0 ? a : gcd(b, a % b);\n  }\n  return gcd(x, banana);\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n  function gcd(a, b) {\n    return b === 0 ? a : gcd(b, a % b);\n  }\n  return gcd(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "Question:\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef meaning_of_life():\n    return 42\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "Question:\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything\n\nAnswer:\n", "answer": "Here is a simple implementation of the function:\n\n```javascript\nfunction meaning_of_life() {\n  return 42;\n}\n```\n\nThis function returns the integer 42, which is the answer to life the universe and everything.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "Question:\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef things():\n    return [5, 'foobar', 'Madrid']\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "Question:\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\n\nAnswer:\n", "answer": "Here's how you can do it in JavaScript:\n\n```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "Question:\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef secretidentities():\n    superheroes = {\n        'Superman': 'Clark Kent',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Stan Lee'\n    }\n    return superheroes\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def secretidentities():\n    superheroes = {\n        'Superman': 'Clark Kent',\n        'Batman': 'Bruce Wayne',\n        'Spider-Man': 'Stan Lee'\n    }\n    return superheroes", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Stan Lee", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "Question:\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```javascript\nfunction secretidentities() {\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    Spider-Man: 'Stan Lee'\n  };\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function secretidentities() {\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    Spider-Man: 'Stan Lee'\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "Question:\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\n\nAnswer:\n", "answer": "Here is the implementation of the fibonacci sequence in Python:\n\n```python\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n```\n\nThe function `fib(n)` uses recursion to calculate the `n`-th element of the fibonacci sequence. If `n` is 0 or 1, the function returns the corresponding element of the sequence. Otherwise, it recursively calls itself with `n - 1` and `n - 2` as arguments, and returns the sum of the two previous elements.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "Question:\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\n\nAnswer:\n", "answer": ":\n```javascript\nfunction fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "Question:\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\n\nAnswer:\n", "answer": "Here is the implementation of the `potato` function:\n\n```python\ndef potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 1) + potato(g - 2)\n```\n\nThe `potato` function uses recursion to calculate the `g`-th element of the fibonacci sequence. It checks if `g` is 0 or 1, and returns the corresponding base cases. Otherwise, it recursively calls itself with `g - 1` and `g - 2` as arguments, and returns the sum of the two previous elements.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 1) + potato(g - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "Question:\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\n\nAnswer:\n", "answer": ":\n```javascript\nfunction potato(g) {\n  if (g === 0) {\n    return 0;\n  } else if (g === 1) {\n    return 1;\n  } else {\n    return potato(g - 1) + potato(g - 2);\n  }\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function potato(g) {\n  if (g === 0) {\n    return 0;\n  } else if (g === 1) {\n    return 1;\n  } else {\n    return potato(g - 1) + potato(g - 2);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "Question:\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef fib(n):\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def fib(n):\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "Question:\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence\n\nAnswer:\n", "answer": ":\n```javascript\nfunction fib(n) {\n  let a = 0;\n  let b = 1;\n  let result = [a, b];\n\n  for (let i = 2; i < n; i++) {\n    let c = a + b;\n    result.push(c);\n    a = b;\n    b = c;\n  }\n\n  return result;\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function fib(n) {\n  let a = 0;\n  let b = 1;\n  let result = [a, b];\n\n  for (let i = 2; i < n; i++) {\n    let c = a + b;\n    result.push(c);\n    a = b;\n    b = c;\n  }\n\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "Question:\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\n\nAnswer:\n", "answer": "Here's how you could do it:\n\n```python\ndef glork(bork):\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < bork:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence[:bork]\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def glork(bork):\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < bork:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "Question:\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\n\nAnswer:\n", "answer": ":\n```javascript\nfunction glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci.slice(0, bork);\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci.slice(0, bork);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "Question:\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\n\nAnswer:\n", "answer": "To count the number of times a sub-string occurs in a string, we can use the `count()` method of the `str` class in Python. This method takes a sub-string as an argument and returns the number of times it occurs in the string.\n\nHere is the implementation of the `substrcount()` function:\n\n```python\ndef substrcount(str, substr):\n    return str.count(substr)\n```\n\nThe `substrcount()` function takes two arguments: `str` and `substr`. It returns the number of times the sub-string `substr` occurs in the string `str`.", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    return str.count(substr)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "Question:\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\n\nAnswer:\n", "answer": ":\n```javascript\nfunction substrcount(str, substr) {\n  let count = 0;\n  let index = str.indexOf(substr);\n  while (index !== -1) {\n    count++;\n    index = str.indexOf(substr, index + 1);\n  }\n  return count;\n}\n```", "params": "GenerationConfig {\n  \"bos_token_id\": 0,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "ibm-granite-granite-3b-code-instruct-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n  let count = 0;\n  let index = str.indexOf(substr);\n  while (index !== -1) {\n    count++;\n    index = str.indexOf(substr, index + 1);\n  }\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}