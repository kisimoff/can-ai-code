{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using iteration\ndef factorial(n):", "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using recursion\ndef factorial(n):", "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a python function with input bork that returns the factorial of bork\ndef glork(bork):", "answer": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a javascript function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n    if (bork == 0) {\n        return 1;\n    } else {\n        return bork * glork(bork - 1);\n    }\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n    if (bork == 0) {\n        return 1;\n    } else {\n        return bork * glork(bork - 1);\n    }\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):", "answer": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\nfunction gcd(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):", "answer": "def gcf(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcf(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\nfunction gcf(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcf(b, a % b);\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcf(b, a % b);\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a python function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):", "answer": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return fofx(banana % x, x)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return fofx(banana % x, x)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a javascript function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\nfunction fofx(x, banana) {\n    if (x == 0) {\n        return banana;\n    }\n    return fofx(banana % x, x);\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n    if (x == 0) {\n        return banana;\n    }\n    return fofx(banana % x, x);\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a python function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef meaning_of_life():", "answer": "def meaning_of_life():\n    return 42\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\n#", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction meaning_of_life() {", "answer": "\nfunction meaning_of_life() {\n    return 42;\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n    return 42;\n}\n\n//", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a python function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef things():", "answer": "def things():\n    return [5, 'foobar', 'Madrid']\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction things() {", "answer": "\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}\n\n//", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a python function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef secretidentities():", "answer": "def secretidentities():\n    return {'Superman':'Clark Kent', 'Batman':'Bruce Wayne', 'Spider-Man':'Peter Parker'}\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {'Superman':'Clark Kent', 'Batman':'Bruce Wayne', 'Spider-Man':'Peter Parker'}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a javascript function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction secretidentities() {", "answer": "\nfunction secretidentities() {\n    return {\n        \"Clark Kent\": \"Superman\",\n        \"Bruce Wayne\": \"Batman\",\n        \"Peter Parker\": \"Spider-Man\"\n    }\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function secretidentities() {\n    return {\n        \"Clark Kent\": \"Superman\",\n        \"Bruce Wayne\": \"Batman\",\n        \"Peter Parker\": \"Spider-Man\"\n    }\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a python function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):", "answer": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a python function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef potato(g):", "answer": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g-1) + potato(g-2)\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g-1) + potato(g-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a javascript function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction potato(g) {", "answer": "\nfunction potato(g) {\n  if (g == 0) {\n    return 0;\n  } else if (g == 1) {\n    return 1;\n  } else {\n    return potato(g - 1) + potato(g - 2);\n  }\n}\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function potato(g) {\n  if (g == 0) {\n    return 0;\n  } else if (g == 1) {\n    return 1;\n  } else {\n    return potato(g - 1) + potato(g - 2);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a python function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef fib(n):", "answer": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": 1, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": 1, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": 2, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": 5, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 2, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n  if (n === 0) {\n    return [0];\n  } else if (n === 1) {\n    return [0, 1];\n  } else {\n    const fibs = fib(n - 1);\n    fibs.push(fibs[fibs.length - 1] + fibs[fibs.length - 2]);\n    return fibs;\n  }\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n === 0) {\n    return [0];\n  } else if (n === 1) {\n    return [0, 1];\n  } else {\n    const fibs = fib(n - 1);\n    fibs.push(fibs[fibs.length - 1] + fibs[fibs.length - 2]);\n    return fibs;\n  }\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a python function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef glork(bork):", "answer": "def glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[:bork]\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[:bork]\n\n#", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n  let fib = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  let fib = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a python function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):", "answer": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n\n#\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n\n#", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a javascript function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\nfunction substrcount(str, substr) {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str.slice(i, i + substr.length) === substr) {\n      count++;\n      i += substr.length;\n    } else {\n      i++;\n    }\n  }\n  return count;\n}\n\n//", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"eos_token_id\": [\n    70,\n    1\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-codegemma-7b-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str.slice(i, i + substr.length) === substr) {\n      count++;\n      i += substr.length;\n    } else {\n      i++;\n    }\n  }\n  return count;\n}\n\n//", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}