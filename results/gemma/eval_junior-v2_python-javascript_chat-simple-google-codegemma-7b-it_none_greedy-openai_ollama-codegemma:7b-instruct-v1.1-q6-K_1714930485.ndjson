{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n using iteration.\n\n    Args:\n        n: The number to find the factorial of.\n\n    Returns:\n        The factorial of n.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def factorial(n):\n    \"\"\"\n    Returns the factorial of n using iteration.\n\n    Args:\n        n: The number to find the factorial of.\n\n    Returns:\n        The factorial of n.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction factorial(n) {\n  let result = 1;\n\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n}\n```\n\n**Explanation:**\n\n* The function takes one argument, `n`, which represents the number for which we want to calculate the factorial.\n* It initializes a variable `result` to 1. This is the starting value for the factorial calculation.\n* It enters a `for` loop that iterates from 1 to `n`.\n* Inside the loop, it multiplies `result` by the current value of `i`.\n* After the loop completes, the function returns the value of `result`, which represents the factorial of `n`.\n\n**Example Usage:**\n\n```\nconsole.log(factorial(5)); // Output: 120\nconsole.log(factorial(0)); // Output: 1\nconsole.log(factorial(3)); // Output: 6\n```\n\n**Time Complexity:** O(n), where n is the input number.\n\n**Space Complexity:** O(1), as the function uses a constant amount of additional space for the `result` variable.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function factorial(n) {\n  let result = 1;\n\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n**Explanation:**\n\n* The function takes an integer `n` as input.\n* It checks if `n` is equal to 0 or 1. If it is, it returns 1. This is the base case for the recursion.\n* If `n` is not 0 or 1, it calculates the factorial of `n` by multiplying `n` with the factorial of `n-1`.\n* The recursion continues until it reaches the base case.\n\n**Example Usage:**\n\n```python\n>>> factorial(5)\n120\n>>> factorial(0)\n1\n>>> factorial(1)\n1\n```\n\n**Time Complexity:**\n\n* The time complexity of the factorial function is O(n), where n is the input number. This is because the function calls itself recursively n times.\n\n**Space Complexity:**\n\n* The space complexity of the factorial function is also O(n), due to the recursive nature of the function. Each recursive call creates a new stack frame, which takes up space.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```\n\n**Explanation:**\n\n* The function takes one argument, `n`.\n* It checks if `n` is equal to 0 or 1. If it is, it returns 1. This is the base case for the recursion.\n* If `n` is not 0 or 1, it calculates the factorial of `n` by multiplying `n` with the factorial of `n-1`.\n* The recursion continues until the base case is reached.\n\n**Example Usage:**\n\n```\nconsole.log(factorial(5)); // Output: 120\nconsole.log(factorial(0)); // Output: 1\nconsole.log(factorial(1)); // Output: 1\n```\n\n**Time Complexity:**\n\n* The time complexity of the factorial function is O(n), where n is the input number.\n* This is because the function calls itself recursively n times.\n\n**Space Complexity:**\n\n* The space complexity of the factorial function is also O(n), due to the recursive nature of the function.\n* Each recursive call consumes additional stack space.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function glork(bork) with input bork that returns the factorial of bork<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef glork(bork):\n    \"\"\"\n    Returns the factorial of bork.\n\n    Args:\n        bork: The number to find the factorial of.\n\n    Returns:\n        The factorial of bork.\n    \"\"\"\n\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def glork(bork):\n    \"\"\"\n    Returns the factorial of bork.\n\n    Args:\n        bork: The number to find the factorial of.\n\n    Returns:\n        The factorial of bork.\n    \"\"\"\n\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction glork(bork) {\n  if (bork === 0 || bork === 1) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function glork(bork) {\n  if (bork === 0 || bork === 1) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers.\n\n    Args:\n        a: The first number.\n        b: The second number.\n\n    Returns:\n        The greatest common divisor of a and b.\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers.\n\n    Args:\n        a: The first number.\n        b: The second number.\n\n    Returns:\n        The greatest common divisor of a and b.\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction gcd(a, b) {\n  let temp;\n\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n\n  return a;\n}\n```\n\n**Explanation:**\n\n* The function takes two arguments, `a` and `b`.\n* It initializes a variable `temp` to store the temporary value of `b`.\n* It enters a `while` loop that continues until `b` becomes 0.\n* Inside the loop, it calculates the remainder of `a` divided by `b` and assigns it to `temp`.\n* It then updates `a` to `temp` and `b` to the remainder.\n* After the loop terminates, `a` holds the GCD of `a` and `b`.\n* The function returns `a`.\n\n**Example Usage:**\n\n```\nconsole.log(gcd(12, 18)); // Output: 6\nconsole.log(gcd(24, 36)); // Output: 12\n```\n\n**Time Complexity:** O(log(min(a, b)))\n\n**Space Complexity:** O(1)", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function gcd(a, b) {\n  let temp;\n\n  while (b !== 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n\n  return a;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef gcf(a, b):\n    \"\"\"\n    Returns the greatest common factor of two numbers.\n\n    Args:\n        a: The first number.\n        b: The second number.\n\n    Returns:\n        The greatest common factor of a and b.\n    \"\"\"\n\n    # Find the minimum of the two numbers.\n    min_num = min(a, b)\n\n    # Iterate through the numbers from 1 to the minimum of a and b.\n    for i in range(min_num, 0, -1):\n        # Check if both numbers are divisible by i.\n        if a % i == 0 and b % i == 0:\n            return i\n\n    # If no common factor is found, return 1.\n    return 1\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def gcf(a, b):\n    \"\"\"\n    Returns the greatest common factor of two numbers.\n\n    Args:\n        a: The first number.\n        b: The second number.\n\n    Returns:\n        The greatest common factor of a and b.\n    \"\"\"\n\n    # Find the minimum of the two numbers.\n    min_num = min(a, b)\n\n    # Iterate through the numbers from 1 to the minimum of a and b.\n    for i in range(min_num, 0, -1):\n        # Check if both numbers are divisible by i.\n        if a % i == 0 and b % i == 0:\n            return i\n\n    # If no common factor is found, return 1.\n    return 1", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction gcf(a, b) {\n  let divisor = a < b ? a : b;\n  while (divisor > 0) {\n    if (a % divisor === 0 && b % divisor === 0) {\n      return divisor;\n    }\n    divisor--;\n  }\n  return 1;\n}\n```\n\n**Explanation:**\n\n* The function takes two inputs, `a` and `b`.\n* It initializes a variable `divisor` to the smaller of the two inputs.\n* It enters a `while` loop that continues until `divisor` reaches 0.\n* Inside the loop, it checks if both `a` and `b` are divisible by `divisor`.\n* If both numbers are divisible by `divisor`, it returns `divisor` as the GCF.\n* If the numbers are not divisible by `divisor`, it decrements `divisor` and continues the loop.\n* If the loop completes without finding a common divisor, it returns 1.\n\n**Example Usage:**\n\n```\nconsole.log(gcf(12, 18)); // Output: 6\nconsole.log(gcf(21, 28)); // Output: 7\n```\n\n**Time Complexity:** O(min(a, b)), where min(a, b) is the smaller of the two inputs.\n\n**Space Complexity:** O(1), as the function uses only a constant amount of additional space.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function gcf(a, b) {\n  let divisor = a < b ? a : b;\n  while (divisor > 0) {\n    if (a % divisor === 0 && b % divisor === 0) {\n      return divisor;\n    }\n    divisor--;\n  }\n  return 1;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\nfrom math import gcd\n\ndef fofx(x, banana):\n    \"\"\"\n    Returns the greatest common denominator of x and banana.\n\n    Args:\n        x: The first number.\n        banana: The second number.\n\n    Returns:\n        The greatest common denominator of x and banana.\n    \"\"\"\n\n    return gcd(x, banana)\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "from math import gcd\n\ndef fofx(x, banana):\n    \"\"\"\n    Returns the greatest common denominator of x and banana.\n\n    Args:\n        x: The first number.\n        banana: The second number.\n\n    Returns:\n        The greatest common denominator of x and banana.\n    \"\"\"\n\n    return gcd(x, banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fofx(x, banana) {\n  let temp;\n\n  while (banana !== 0) {\n    temp = banana;\n    banana = x % banana;\n    x = temp;\n  }\n\n  return x;\n}\n```\n\n**Explanation:**\n\n* The function uses the Euclidean algorithm to calculate the gcd of two numbers.\n* It iterates until the remainder of x divided by banana is 0.\n* In each iteration, it stores the value of banana in a temporary variable temp, calculates the remainder of x divided by banana, and updates x to the value of banana.\n* The loop continues until banana becomes 0.\n* At this point, x contains the gcd of the two input numbers.\n* The function returns x.\n\n**Example Usage:**\n\n```\nconsole.log(fifox(12, 18)); // Output: 6\nconsole.log(fifox(24, 36)); // Output: 12\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function fofx(x, banana) {\n  let temp;\n\n  while (banana !== 0) {\n    temp = banana;\n    banana = x % banana;\n    x = temp;\n  }\n\n  return x;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef meaning_of_life():\n    \"\"\"\n    Returns the answer to life, the universe, and everything.\n    \"\"\"\n    return 42\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def meaning_of_life():\n    \"\"\"\n    Returns the answer to life, the universe, and everything.\n    \"\"\"\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction meaning_of_life() {\n  return 42;\n}\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef things():\n    return [5, 'foobar', 'Madrid']\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\",\n    }\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def secretidentities():\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\",\n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction secretidentities() {\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker',\n  };\n}\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function secretidentities() {\n  return {\n    Superman: 'Clark Kent',\n    Batman: 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker',\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef fib(n):\n    \"\"\"\n    Returns the n-th element of the fibonacci sequence.\n\n    Args:\n        n: The element number (0 based)\n\n    Returns:\n        The n-th element of the fibonacci sequence\n    \"\"\"\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def fib(n):\n    \"\"\"\n    Returns the n-th element of the fibonacci sequence.\n\n    Args:\n        n: The element number (0 based)\n\n    Returns:\n        The n-th element of the fibonacci sequence\n    \"\"\"\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n\n  let a = 0;\n  let b = 1;\n  let c;\n\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n\n  return b;\n}\n```\n\n**Explanation:**\n\n* The function uses a loop to calculate the fibonacci sequence up to the `n`-th element.\n* It initializes two variables, `a` and `b`, to the first two elements of the sequence (0 and 1).\n* The loop iterates from 2 to `n`, calculating the next element `c` as the sum of the previous two elements.\n* After the loop, the function returns `b`, which represents the `n`-th fibonacci element.\n\n**Example Usage:**\n\n```\nconsole.log(fib(5)); // Output: 5\nconsole.log(fib(10)); // Output: 55\n```\n\n**Time Complexity:** O(n), where n is the input number.\n\n**Space Complexity:** O(1), as the function uses only a constant amount of additional space.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n\n  let a = 0;\n  let b = 1;\n  let c;\n\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n\n  return b;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef fibonacci(g):\n    \"\"\"\n    Returns the g-th element of the fibonacci sequence.\n\n    Args:\n        g (int): The element number to return.\n\n    Returns:\n        int: The g-th element of the fibonacci sequence.\n    \"\"\"\n\n    a, b = 0, 1\n    for _ in range(g):\n        a, b = b, a + b\n    return a\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def fibonacci(g):\n    \"\"\"\n    Returns the g-th element of the fibonacci sequence.\n\n    Args:\n        g (int): The element number to return.\n\n    Returns:\n        int: The g-th element of the fibonacci sequence.\n    \"\"\"\n\n    a, b = 0, 1\n    for _ in range(g):\n        a, b = b, a + b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "fibonacci", "status": 0}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fibonacci(g) {\n  const fib = [0, 1];\n\n  for (let i = 2; i <= g; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n\n  return fib[g];\n}\n```\n\n**Explanation:**\n\n* The function initializes an array `fib` with the first two Fibonacci numbers, 0 and 1.\n* It then iterates from 2 to `g`, calculating each Fibonacci number based on the previous two numbers in the array.\n* Finally, the function returns the `g`-th element from the `fib` array.\n\n**Example Usage:**\n\n```\nconsole.log(fibonacci(5)); // Output: 5\nconsole.log(fibonacci(10)); // Output: 55\n```\n\n**Time Complexity:** O(g), where g is the input element number.\n\n**Space Complexity:** O(g), as the array `fib` grows with the input size.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function fibonacci(g) {\n  const fib = [0, 1];\n\n  for (let i = 2; i <= g; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n\n  return fib[g];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "fibonacci", "status": 0}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef fib(n):\n    \"\"\"\n    Returns a list with the first n elements of the fibonacci sequence.\n\n    Args:\n        n: The length of the fibonacci sequence to return.\n\n    Returns:\n        A list with the first n elements of the fibonacci sequence.\n    \"\"\"\n\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def fib(n):\n    \"\"\"\n    Returns a list with the first n elements of the fibonacci sequence.\n\n    Args:\n        n: The length of the fibonacci sequence to return.\n\n    Returns:\n        A list with the first n elements of the fibonacci sequence.\n    \"\"\"\n\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fib(n) {\n  const result = [0, 1];\n\n  for (let i = 2; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2]);\n  }\n\n  return result;\n}\n```\n\n**Explanation:**\n\n* The function initializes an array `result` with the first two Fibonacci numbers, 0 and 1.\n* It then iterates from 2 to `n - 1` using a `for` loop.\n* In each iteration, it calculates the next Fibonacci number by adding the last two numbers in the `result` array.\n* Finally, the function returns the `result` array containing the first `n` Fibonacci numbers.\n\n**Example Usage:**\n\n```\nconsole.log(fib(6));\n```\n\n**Output:**\n\n```\n[0, 1, 1, 2, 3, 5]\n```\n\n**Time Complexity:** O(n), where n is the input length.\n\n**Space Complexity:** O(n), as the result array stores all the Fibonacci numbers up to n.", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function fib(n) {\n  const result = [0, 1];\n\n  for (let i = 2; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2]);\n  }\n\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[:bork]\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction glork(bork) {\n  const fibonacci = [0, 1];\n\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n\n  return fibonacci.slice(0, bork);\n}\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function glork(bork) {\n  const fibonacci = [0, 1];\n\n  for (let i = 2; i < bork; i++) {\n    fibonacci.push(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n\n  return fibonacci.slice(0, bork);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef substrcount(str, substr):\n    \"\"\"\n    Counts the number of times a substring occurs in a string.\n\n    Args:\n        str: The string to search.\n        substr: The substring to count.\n\n    Returns:\n        The number of times the substring occurs in the string.\n    \"\"\"\n\n    count = 0\n    start = 0\n\n    while True:\n        index = str.find(substr, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + len(substr)\n\n    return count\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "def substrcount(str, substr):\n    \"\"\"\n    Counts the number of times a substring occurs in a string.\n\n    Args:\n        str: The string to search.\n        substr: The substring to count.\n\n    Returns:\n        The number of times the substring occurs in the string.\n    \"\"\"\n\n    count = 0\n    start = 0\n\n    while True:\n        index = str.find(substr, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + len(substr)\n\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction substrcount(str, substr) {\n  let count = 0;\n  let i = 0;\n\n  while ((i = str.indexOf(substr, i)) !== -1) {\n    count++;\n    i += substr.length;\n  }\n\n  return count;\n}\n```\n\n**Explanation:**\n\n* The function takes two arguments, `str` and `substr`.\n* It initializes a variable `count` to 0 and a variable `i` to 0.\n* It uses a `while` loop to search for the `substr` within `str`.\n* The `indexOf()` method is used to find the first occurrence of `substr` starting at the current position `i`.\n* If `indexOf()` returns -1, it means the substring is not found, and the loop terminates.\n* Otherwise, the count is incremented, and the `i` is updated to the starting position of the next occurrence.\n* The loop continues until all occurrences are found.\n* Finally, the function returns the count.\n\n**Example Usage:**\n\n```\nconsole.log(substrcount(\"Hello world, hello\", \"hello\")); // Output: 2\nconsole.log(substrcount(\"Mississippi\", \"iss\")); // Output: 2\n```", "params": {"temperature": 0.0, "max_tokens": 1024}, "model": "ollama/codegemma:7b-instruct-v1.1-q6_K", "runtime": "ollama", "code": "function substrcount(str, substr) {\n  let count = 0;\n  let i = 0;\n\n  while ((i = str.indexOf(substr, i)) !== -1) {\n    count++;\n    i += substr.length;\n  }\n\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}